/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BalanceHistory } from "./components/common.interfaces";
import { BUTTON_TYPES } from "./enums";
export namespace Components {
    interface IbtnAwaiting {
        /**
          * The IOTA address to send funds to.
         */
        "amount": string;
    }
    interface IbtnButtonBalance {
        /**
          * Button disabled.
         */
        "disabled": boolean;
        /**
          * Button label.
         */
        "label": string;
    }
    interface IbtnButtonDonation {
        /**
          * Button disabled.
         */
        "disabled": boolean;
        /**
          * Button label.
         */
        "label": string;
    }
    interface IbtnButtonPayment {
        /**
          * Button disabled.
         */
        "disabled": boolean;
        /**
          * Button label.
         */
        "label": string;
    }
    interface IbtnDonationRequest {
        /**
          * The IOTA address to send funds to.
         */
        "address": string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount": number;
        /**
          * Current address balance.
         */
        "balance": number;
        /**
          * Current address balance.
         */
        "balanceHistory": BalanceHistory[];
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency": string;
        /**
          * Currency exchange rate.
         */
        "currencyExchangeRate": number;
        /**
          * Merchant name
         */
        "merchant": string;
        /**
          * USD Exchange rate
         */
        "usdExchangeRate": number;
    }
    interface IbtnModalClose {
    }
    interface IbtnPaymentProcess {
        /**
          * The IOTA address to send funds to.
         */
        "address": string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount": number;
        /**
          * Current address balance.
         */
        "balance": number;
        /**
          * Current address balance.
         */
        "balanceHistory": BalanceHistory[];
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency": string;
        /**
          * Currency exchange rate.
         */
        "currencyExchangeRate": number;
        /**
          * USD Exchange rate
         */
        "usdExchangeRate": number;
    }
    interface IbtnQrPayment {
        /**
          * The IOTA address to send funds to.
         */
        "address": string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount": number;
    }
    interface IotaButton {
        /**
          * The IOTA address to send funds to.
         */
        "address": string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount": number;
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency": string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "label": string;
        /**
          * Merchant name
         */
        "merchant": string;
        /**
          * Show modal. This is default by true but can be overwriten.
         */
        "show": 'false'|'true';
        /**
          * Unique tran id to understand we received this particular payment. You must make sure you provide an unique ID. Otherwise, system might think that the payment was already finalised.
         */
        "tranid": string;
        /**
          * Button types supported by IOTA BUTTON. Each of them visualise differently.
         */
        "type": BUTTON_TYPES;
    }
}
declare global {
    interface HTMLIbtnAwaitingElement extends Components.IbtnAwaiting, HTMLStencilElement {
    }
    var HTMLIbtnAwaitingElement: {
        prototype: HTMLIbtnAwaitingElement;
        new (): HTMLIbtnAwaitingElement;
    };
    interface HTMLIbtnButtonBalanceElement extends Components.IbtnButtonBalance, HTMLStencilElement {
    }
    var HTMLIbtnButtonBalanceElement: {
        prototype: HTMLIbtnButtonBalanceElement;
        new (): HTMLIbtnButtonBalanceElement;
    };
    interface HTMLIbtnButtonDonationElement extends Components.IbtnButtonDonation, HTMLStencilElement {
    }
    var HTMLIbtnButtonDonationElement: {
        prototype: HTMLIbtnButtonDonationElement;
        new (): HTMLIbtnButtonDonationElement;
    };
    interface HTMLIbtnButtonPaymentElement extends Components.IbtnButtonPayment, HTMLStencilElement {
    }
    var HTMLIbtnButtonPaymentElement: {
        prototype: HTMLIbtnButtonPaymentElement;
        new (): HTMLIbtnButtonPaymentElement;
    };
    interface HTMLIbtnDonationRequestElement extends Components.IbtnDonationRequest, HTMLStencilElement {
    }
    var HTMLIbtnDonationRequestElement: {
        prototype: HTMLIbtnDonationRequestElement;
        new (): HTMLIbtnDonationRequestElement;
    };
    interface HTMLIbtnModalCloseElement extends Components.IbtnModalClose, HTMLStencilElement {
    }
    var HTMLIbtnModalCloseElement: {
        prototype: HTMLIbtnModalCloseElement;
        new (): HTMLIbtnModalCloseElement;
    };
    interface HTMLIbtnPaymentProcessElement extends Components.IbtnPaymentProcess, HTMLStencilElement {
    }
    var HTMLIbtnPaymentProcessElement: {
        prototype: HTMLIbtnPaymentProcessElement;
        new (): HTMLIbtnPaymentProcessElement;
    };
    interface HTMLIbtnQrPaymentElement extends Components.IbtnQrPayment, HTMLStencilElement {
    }
    var HTMLIbtnQrPaymentElement: {
        prototype: HTMLIbtnQrPaymentElement;
        new (): HTMLIbtnQrPaymentElement;
    };
    interface HTMLIotaButtonElement extends Components.IotaButton, HTMLStencilElement {
    }
    var HTMLIotaButtonElement: {
        prototype: HTMLIotaButtonElement;
        new (): HTMLIotaButtonElement;
    };
    interface HTMLElementTagNameMap {
        "ibtn-awaiting": HTMLIbtnAwaitingElement;
        "ibtn-button-balance": HTMLIbtnButtonBalanceElement;
        "ibtn-button-donation": HTMLIbtnButtonDonationElement;
        "ibtn-button-payment": HTMLIbtnButtonPaymentElement;
        "ibtn-donation-request": HTMLIbtnDonationRequestElement;
        "ibtn-modal-close": HTMLIbtnModalCloseElement;
        "ibtn-payment-process": HTMLIbtnPaymentProcessElement;
        "ibtn-qr-payment": HTMLIbtnQrPaymentElement;
        "iota-button": HTMLIotaButtonElement;
    }
}
declare namespace LocalJSX {
    interface IbtnAwaiting {
        /**
          * The IOTA address to send funds to.
         */
        "amount"?: string;
    }
    interface IbtnButtonBalance {
        /**
          * Button disabled.
         */
        "disabled"?: boolean;
        /**
          * Button label.
         */
        "label"?: string;
    }
    interface IbtnButtonDonation {
        /**
          * Button disabled.
         */
        "disabled"?: boolean;
        /**
          * Button label.
         */
        "label"?: string;
    }
    interface IbtnButtonPayment {
        /**
          * Button disabled.
         */
        "disabled"?: boolean;
        /**
          * Button label.
         */
        "label"?: string;
    }
    interface IbtnDonationRequest {
        /**
          * The IOTA address to send funds to.
         */
        "address"?: string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount"?: number;
        /**
          * Current address balance.
         */
        "balance"?: number;
        /**
          * Current address balance.
         */
        "balanceHistory"?: BalanceHistory[];
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency"?: string;
        /**
          * Currency exchange rate.
         */
        "currencyExchangeRate"?: number;
        /**
          * Merchant name
         */
        "merchant"?: string;
        /**
          * USD Exchange rate
         */
        "usdExchangeRate"?: number;
    }
    interface IbtnModalClose {
    }
    interface IbtnPaymentProcess {
        /**
          * The IOTA address to send funds to.
         */
        "address"?: string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount"?: number;
        /**
          * Current address balance.
         */
        "balance"?: number;
        /**
          * Current address balance.
         */
        "balanceHistory"?: BalanceHistory[];
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency"?: string;
        /**
          * Currency exchange rate.
         */
        "currencyExchangeRate"?: number;
        /**
          * USD Exchange rate
         */
        "usdExchangeRate"?: number;
    }
    interface IbtnQrPayment {
        /**
          * The IOTA address to send funds to.
         */
        "address"?: string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount"?: number;
    }
    interface IotaButton {
        /**
          * The IOTA address to send funds to.
         */
        "address"?: string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "amount"?: number;
        /**
          * Real currency code. Error is thrown if currency not supported. Undefined means MIOTA
         */
        "currency"?: string;
        /**
          * Define button label text. Defaults to 'Pay with IOTA'
         */
        "label"?: string;
        /**
          * Merchant name
         */
        "merchant"?: string;
        /**
          * Show modal. This is default by true but can be overwriten.
         */
        "show"?: 'false'|'true';
        /**
          * Unique tran id to understand we received this particular payment. You must make sure you provide an unique ID. Otherwise, system might think that the payment was already finalised.
         */
        "tranid"?: string;
        /**
          * Button types supported by IOTA BUTTON. Each of them visualise differently.
         */
        "type"?: BUTTON_TYPES;
    }
    interface IntrinsicElements {
        "ibtn-awaiting": IbtnAwaiting;
        "ibtn-button-balance": IbtnButtonBalance;
        "ibtn-button-donation": IbtnButtonDonation;
        "ibtn-button-payment": IbtnButtonPayment;
        "ibtn-donation-request": IbtnDonationRequest;
        "ibtn-modal-close": IbtnModalClose;
        "ibtn-payment-process": IbtnPaymentProcess;
        "ibtn-qr-payment": IbtnQrPayment;
        "iota-button": IotaButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ibtn-awaiting": LocalJSX.IbtnAwaiting & JSXBase.HTMLAttributes<HTMLIbtnAwaitingElement>;
            "ibtn-button-balance": LocalJSX.IbtnButtonBalance & JSXBase.HTMLAttributes<HTMLIbtnButtonBalanceElement>;
            "ibtn-button-donation": LocalJSX.IbtnButtonDonation & JSXBase.HTMLAttributes<HTMLIbtnButtonDonationElement>;
            "ibtn-button-payment": LocalJSX.IbtnButtonPayment & JSXBase.HTMLAttributes<HTMLIbtnButtonPaymentElement>;
            "ibtn-donation-request": LocalJSX.IbtnDonationRequest & JSXBase.HTMLAttributes<HTMLIbtnDonationRequestElement>;
            "ibtn-modal-close": LocalJSX.IbtnModalClose & JSXBase.HTMLAttributes<HTMLIbtnModalCloseElement>;
            "ibtn-payment-process": LocalJSX.IbtnPaymentProcess & JSXBase.HTMLAttributes<HTMLIbtnPaymentProcessElement>;
            "ibtn-qr-payment": LocalJSX.IbtnQrPayment & JSXBase.HTMLAttributes<HTMLIbtnQrPaymentElement>;
            "iota-button": LocalJSX.IotaButton & JSXBase.HTMLAttributes<HTMLIotaButtonElement>;
        }
    }
}
